name: CI/CD

on: push

env:
  PYTHON_VERSION: 3.9

jobs:
  # -----
  # Setup
  # -----

  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

  # -------
  # Linting
  # -------

  lint-black:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run black
        run: |
           . .venv/bin/activate
           invoke lint-black

  lint-flake8:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run flake8
        run: |
          . .venv/bin/activate
          invoke lint-flake8

  lint-isort:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run isort
        run: |
          . .venv/bin/activate
          invoke lint-isort

  lint-mypy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run mypy
        run: |
          . .venv/bin/activate
          invoke lint-mypy

  # -------
  # Testing
  # -------

  test-unit:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run unit tests
        run: |
          . .venv/bin/activate
          invoke test-unit

  test-integration:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5432:5432"
    env:
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: "5432"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run integration tests
        run: |
          . .venv/bin/activate
          invoke test-integration

  test-functional:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "5432:5432"
    env:
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: "5432"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Load cached venv
        uses: actions/cache@v2.1.5
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Run functional tests
        run: |
          . .venv/bin/activate
          invoke test-functional

  # -----------------
  # Build and publish
  # -----------------

  build:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      - lint-black
      - lint-flake8
      - lint-isort
      - lint-mypy
      - test-unit
      - test-integration
      - test-functional
    steps:
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v2
        with:
          build-args: "SENTRY_RELEASE=katubi@${{ github.sha }}"
          push: true
          platforms: linux/arm/v7
          tags: "ghcr.io/${{ github.repository }}:latest"

  release:
    runs-on: ubuntu-latest
    needs:
      - build
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          version_prefix: "katubi@"

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      - build
    steps:
      - uses: appleboy/ssh-action@v0.1.4
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
          GH_USERNAME: ${{ github.repository_owner }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: CR_PAT,GH_USERNAME
          script: |
            export CR_PAT=$CR_PAT
            export GH_USERNAME=$GH_USERNAME
            ${{ secrets.DEPLOY_SCRIPT }}
